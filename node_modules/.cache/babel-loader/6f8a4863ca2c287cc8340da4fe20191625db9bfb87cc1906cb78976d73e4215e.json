{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport firebaseConfig from '../firebase-config.json';\nexport const signInWithGoogle = async () => {\n  const app = initializeApp(firebaseConfig);\n  const provider = new GoogleAuthProvider();\n  const auth = getAuth(app);\n  const result = await signInWithPopup(auth, provider);\n  const credential = GoogleAuthProvider.credentialFromResult(result);\n  const idToken = await auth.currentUser.getIdToken();\n  return idToken;\n};","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","signInWithPopup","firebaseConfig","signInWithGoogle","app","provider","auth","result","credential","credentialFromResult","idToken","currentUser","getIdToken"],"sources":["/Users/chanchalbajoria/Dropbox/My Mac (Chanchalâ€™s MacBook Air)/Documents/TNBC-Web-App-Client/src/utils/firebase.ts"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport request from 'axios'\nimport firebaseConfig from '../firebase-config.json'\n\nexport const signInWithGoogle = async() => {\n    const app = initializeApp(firebaseConfig)\n    const provider = new GoogleAuthProvider()\n    const auth = getAuth(app)\n    const result = await signInWithPopup(auth, provider)\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    const idToken = await auth!.currentUser!.getIdToken()\n  \n    return idToken\n}"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,EAAEC,kBAAkB,EAAEC,eAAe,QAAQ,eAAe;AAE5E,OAAOC,cAAc,MAAM,yBAAyB;AAEpD,OAAO,MAAMC,gBAAgB,GAAG,YAAW;EACvC,MAAMC,GAAG,GAAGN,aAAa,CAACI,cAAc,CAAC;EACzC,MAAMG,QAAQ,GAAG,IAAIL,kBAAkB,EAAE;EACzC,MAAMM,IAAI,GAAGP,OAAO,CAACK,GAAG,CAAC;EACzB,MAAMG,MAAM,GAAG,MAAMN,eAAe,CAACK,IAAI,EAAED,QAAQ,CAAC;EACpD,MAAMG,UAAU,GAAGR,kBAAkB,CAACS,oBAAoB,CAACF,MAAM,CAAC;EAClE,MAAMG,OAAO,GAAG,MAAMJ,IAAI,CAAEK,WAAW,CAAEC,UAAU,EAAE;EAErD,OAAOF,OAAO;AAClB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}